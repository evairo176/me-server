// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id        String  @id @default(cuid())
  email     String  @unique
  username  String?  @unique
  name  String?
  password  String?
  bio       String?
  image String @default("https://api.dicebear.com/6.x/notionists-neutral/svg?seed=Tinkerbell")
  youtube   String?
  instagram String?
  facebook  String?
  twitter   String?
  github    String?
  website   String?
  total_posts Int   @default(0)
  total_reads Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog[]
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  Role      Role?   @relation(fields: [roleId], references: [id])
  roleId String?
  Likes     Like[]
  Comment   Comment[]
}

model Role {
  id      String  @id @default(cuid())
  name    String   @unique
  description String?
  status  Boolean @default(true)
  User  User[]
  Permission Permission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id      String  @id @default(cuid())
  name    String   @unique
  description String?
  Role Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Language {
  id       String  @id @default(cuid())
  name     String  
  code     String  @unique
  status Boolean @default(false)
  Categories Category[]
  Blog        Blog[]
  Tag         Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(cuid())
  name     String  
  slug     String
  lang      String?  
  Blog      Blog[]
  Language      Language?   @relation(fields: [lang], references: [code])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Blog {
  id        String  @id @default(cuid())
  authorId  String?
  categoryId  String?
  lang      String?  
  slug      String 
  title     String 
  image     String?
  des       String?
  content   String
  Tags      Tag[]
  Language      Language?   @relation(fields: [lang], references: [code])
  Author      User?   @relation(fields: [authorId], references: [id])
  Categories      Category?   @relation(fields: [categoryId], references: [id])
  Likes     Like[]
  Comment   Comment[]
  total_comments Int   @default(0) 
  total_reads Int   @default(0) 
  total_parent_comments Int   @default(0) 
  draft Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id                String        @id @default(cuid())
  userId            String
  blogId            String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  User              User          @relation(fields: [userId], references: [id])
  Blog              Blog          @relation(fields: [blogId], references: [id])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  userId    String
  parentId  String?
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Blog      Blog     @relation(fields: [blogId], references: [id])
  Parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  Replay    Comment[] @relation("CommentToComment")
}



model Tag {
  id       String  @id @default(cuid())
  name     String 
  lang      String?  
  Blogs     Blog[]
  Language      Language?   @relation(fields: [lang], references: [code])
  // Composite unique constraint on name and language
  @@unique([name, lang], name: "unique_name_lang")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

